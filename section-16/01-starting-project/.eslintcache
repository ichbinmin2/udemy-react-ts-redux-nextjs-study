[{"/Users/min/Desktop/udemy/react-ts-redux-nextjs/section-16/01-starting-project/src/index.js":"1","/Users/min/Desktop/udemy/react-ts-redux-nextjs/section-16/01-starting-project/src/App.js":"2","/Users/min/Desktop/udemy/react-ts-redux-nextjs/section-16/01-starting-project/src/components/SimpleInput.js":"3","/Users/min/Desktop/udemy/react-ts-redux-nextjs/section-16/01-starting-project/src/hooks/use-input.js":"4","/Users/min/Desktop/udemy/react-ts-redux-nextjs/section-16/01-starting-project/src/components/BasicForm.js":"5"},{"size":142,"mtime":1654673200256,"results":"6","hashOfConfig":"7"},{"size":247,"mtime":1655973940743,"results":"8","hashOfConfig":"7"},{"size":3428,"mtime":1655973168835,"results":"9","hashOfConfig":"7"},{"size":1593,"mtime":1655978769275,"results":"10","hashOfConfig":"7"},{"size":3498,"mtime":1655978666145,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"yvmn33",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/min/Desktop/udemy/react-ts-redux-nextjs/section-16/01-starting-project/src/index.js",[],["24","25"],"/Users/min/Desktop/udemy/react-ts-redux-nextjs/section-16/01-starting-project/src/App.js",[],"/Users/min/Desktop/udemy/react-ts-redux-nextjs/section-16/01-starting-project/src/components/SimpleInput.js",["26"],"import { useState } from \"react\";\n\nimport useInput from \"../hooks/use-input\";\n\nconst SimpleInput = (props) => {\n  // name\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  // e-mail\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: eamilChangeHandler,\n    inputBlurHandler: eamilBlurHandler,\n    reset: resetEmailInput,\n  } = useInput((value) => value.trim() !== \"\" && value.includes(\"@\"));\n\n  // const [enteredName, setEnteredName] = useState(\"\");\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  // const enteredNameIsValid = enteredName.trim() !== \"\";\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  // const enteredEmailIsValid =\n  //   enteredEmail.trim() !== \"\" && enteredEmail.includes(\"@\");\n  // const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  } else {\n    formIsValid = false;\n  }\n\n  // const nameInputChangeHandler = (event) => {\n  //   setEnteredName(event.target.value);\n  // };\n\n  // const emailInputChangeHandler = (event) => {\n  //   setEnteredEmail(event.target.value);\n  // };\n\n  // const nameInputBlurHandler = () => {\n  //   setEnteredNameTouched(true);\n  // };\n\n  // const emailInputBlurHandler = () => {\n  //   setEnteredEmailTouched(true);\n  // };\n\n  const formSubmitssionHandler = (event) => {\n    event.preventDefault();\n    // setEnteredNameTouched(true);\n    // setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n\n    // setEnteredName(\"\");\n    // setEnteredNameTouched(false);\n    resetNameInput();\n\n    // setEnteredEmail(\"\");\n    // setEnteredEmailTouched(false);\n    resetEmailInput();\n  };\n\n  const nameInputClasses = nameInputHasError // true 이면,\n    ? \"form-control invalid\" // 경고 css\n    : \"form-control\";\n\n  const emailInputClasses = emailInputHasError // true 이면,\n    ? \"form-control invalid\" // 경고 css\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmitssionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n        {nameInputHasError && (\n          <p className=\"error-text\">Name must not be empty.</p>\n        )}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"name\">Your E-mail</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          onChange={eamilChangeHandler}\n          onBlur={eamilBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputHasError && (\n          <p className=\"error-text\">Email must not be empty.</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n","/Users/min/Desktop/udemy/react-ts-redux-nextjs/section-16/01-starting-project/src/hooks/use-input.js",["27"],"/Users/min/Desktop/udemy/react-ts-redux-nextjs/section-16/01-starting-project/src/components/BasicForm.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":1,"column":10,"nodeType":"34","messageId":"35","endLine":1,"endColumn":18},{"ruleId":"32","severity":1,"message":"33","line":1,"column":10,"nodeType":"34","messageId":"35","endLine":1,"endColumn":18},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]